                 -1   $modde0cv
0000              1   ;  MODDDE2: Register definition for DE2-8052 softcore
0000              2   ;
0000              3   ;   Copyright (C) 2011  Jesus Calvino-Fraga, jesusc at ece.ubc.ca
0000              4   ;
0000              5   ;   This library is free software; you can redistribute it and/or
0000              6   ;   modify it under the terms of the GNU Lesser General Public
0000              7   ;   License as published by the Free Software Foundation; either
0000              8   ;   version 2.1 of the License, or (at your option) any later version.
0000              9   ;
0000             10   ;   This library is distributed in the hope that it will be useful,
0000             11   ;   but WITHOUT ANY WARRANTY; without even the implied warranty of
0000             12   ;   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
0000             13   ;   Lesser General Public License for more details.
0000             14   ;
0000             15   ;   You should have received a copy of the GNU Lesser General Public
0000             16   ;   License along with this library; if not, write to the Free Software
0000             17   ;   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
0000             18   ;
0000             19       
0000             20   P0     DATA  080H  ;PORT 0
0000             21   SP     DATA  081H  ;STACK POINTER
0000             22   DPL    DATA  082H  ;DATA POINTER 0 - LOW BYTE
0000             23   DPH    DATA  083H  ;DATA POINTER 0 - HIGH BYTE
0000             24   DPL1   DATA  084H  ;DATA POINTER 1 - LOW BYTE
0000             25   DPH1   DATA  085H  ;DATA POINTER 1 - HIGH BYTE
0000             26   DPS    DATA  086H  ;DATA POINTER SELECT. DPH1, DPL1 active when DPS.0=1
0000             27   PCON   DATA  087H  ;POWER CONTROL
0000             28   TCON   DATA  088H  ;TIMER CONTROL
0000             29   TMOD   DATA  089H  ;TIMER MODE
0000             30   TL0    DATA  08AH  ;TIMER 0 - LOW BYTE
0000             31   TL1    DATA  08BH  ;TIMER 1 - LOW BYTE
0000             32   TH0    DATA  08CH  ;TIMER 0 - HIGH BYTE
0000             33   TH1    DATA  08DH  ;TIMER 1 - HIGH BYTE
0000             34   P1     DATA  090H  ;PORT 1
0000             35   SCON   DATA  098H  ;SERIAL PORT CONTROL
0000             36   SBUF   DATA  099H  ;SERIAL PORT BUFFER
0000             37   P2     DATA  0A0H  ;PORT 2
0000             38   IE     DATA  0A8H  ;INTERRUPT ENABLE
0000             39   P3     DATA  0B0H  ;PORT 3
0000             40   IP     DATA  0B8H  ;INTERRUPT PRIORITY
0000             41   T2CON  DATA  0C8H  ;TIMER 2 CONTROL
0000             42   T2MOD  DATA  0C9H  ;TIMER 2 MODE
0000             43   RCAP2L DATA  0CAH  ;TIMER 2 CAPTURE REGISTER - LOW BYTE
0000             44   RCAP2H DATA  0CBH  ;TIMER 2 CAPTURE REGISTER - HIGH BYTE
0000             45   TL2    DATA  0CCH  ;TIMER 2 - LOW BYTE
0000             46   TH2    DATA  0CDH  ;TIMER 2 - HIGH BYTE
0000             47   PSW    DATA  0D0H  ;PROGRAM STATUS WORD
0000             48   ACC    DATA  0E0H  ;ACCUMULATOR
0000             49   B      DATA  0F0H  ;MULTIPLICATION REGISTER
0000             50   IT0    BIT   088H  ;TCON.0 - EXT. INTERRUPT 0 TYPE
0000             51   IE0    BIT   089H  ;TCON.1 - EXT. INTERRUPT 0 EDGE FLAG
0000             52   IT1    BIT   08AH  ;TCON.2 - EXT. INTERRUPT 1 TYPE
0000             53   IE1    BIT   08BH  ;TCON.3 - EXT. INTERRUPT 1 EDGE FLAG
0000             54   TR0    BIT   08CH  ;TCON.4 - TIMER 0 ON/OFF CONTROL
0000             55   TF0    BIT   08DH  ;TCON.5 - TIMER 0 OVERFLOW FLAG
0000             56   TR1    BIT   08EH  ;TCON.6 - TIMER 1 ON/OFF CONTROL
0000             57   TF1    BIT   08FH  ;TCON.7 - TIMER 1 OVERFLOW FLAG
0000             58   RI     BIT   098H  ;SCON.0 - RECEIVE INTERRUPT FLAG
0000             59   TI     BIT   099H  ;SCON.1 - TRANSMIT INTERRUPT FLAG
0000             60   RB8    BIT   09AH  ;SCON.2 - RECEIVE BIT 8
0000             61   TB8    BIT   09BH  ;SCON.3 - TRANSMIT BIT 8
0000             62   REN    BIT   09CH  ;SCON.4 - RECEIVE ENABLE
0000             63   SM2    BIT   09DH  ;SCON.5 - SERIAL MODE CONTROL BIT 2
0000             64   SM1    BIT   09EH  ;SCON.6 - SERIAL MODE CONTROL BIT 1
0000             65   SM0    BIT   09FH  ;SCON.7 - SERIAL MODE CONTROL BIT 0
0000             66   EX0    BIT   0A8H  ;IE.0 - EXTERNAL INTERRUPT 0 ENABLE
0000             67   ET0    BIT   0A9H  ;IE.1 - TIMER 0 INTERRUPT ENABLE
0000             68   EX1    BIT   0AAH  ;IE.2 - EXTERNAL INTERRUPT 1 ENABLE
0000             69   ET1    BIT   0ABH  ;IE.3 - TIMER 1 INTERRUPT ENABLE
0000             70   ES     BIT   0ACH  ;IE.4 - SERIAL PORT INTERRUPT ENABLE
0000             71   ET2    BIT   0ADH  ;IE.5 - TIMER 2 INTERRUPT ENABLE
0000             72   EA     BIT   0AFH  ;IE.7 - GLOBAL INTERRUPT ENABLE
0000             73   RXD    BIT   0B0H  ;P3.0 - SERIAL PORT RECEIVE INPUT
0000             74   TXD    BIT   0B1H  ;P3.1 - SERIAL PORT TRANSMIT OUTPUT
0000             75   INT0   BIT   0B2H  ;P3.2 - EXTERNAL INTERRUPT 0 INPUT
0000             76   INT1   BIT   0B3H  ;P3.3 - EXTERNAL INTERRUPT 1 INPUT
0000             77   T0     BIT   0B4H  ;P3.4 - TIMER 0 COUNT INPUT
0000             78   T1     BIT   0B5H  ;P3.5 - TIMER 1 COUNT INPUT
0000             79   WR     BIT   0B6H  ;P3.6 - WRITE CONTROL FOR EXT. MEMORY
0000             80   RD     BIT   0B7H  ;P3.7 - READ CONTROL FOR EXT. MEMORY
0000             81   PX0    BIT   0B8H  ;IP.0 - EXTERNAL INTERRUPT 0 PRIORITY
0000             82   PT0    BIT   0B9H  ;IP.1 - TIMER 0 PRIORITY
0000             83   PX1    BIT   0BAH  ;IP.2 - EXTERNAL INTERRUPT 1 PRIORITY
0000             84   PT1    BIT   0BBH  ;IP.3 - TIMER 1 PRIORITY
0000             85   PS     BIT   0BCH  ;IP.4 - SERIAL PORT PRIORITY
0000             86   PT2    BIT   0BDH  ;IP.5 - TIMER 2 PRIORITY
0000             87   CAP2   BIT   0C8H  ;T2CON.0 - CAPTURE OR RELOAD SELECT
0000             88   CNT2   BIT   0C9H  ;T2CON.1 - TIMER OR COUNTER SELECT
0000             89   TR2    BIT   0CAH  ;T2CON.2 - TIMER 2 ON/OFF CONTROL
0000             90   EXEN2  BIT   0CBH  ;T2CON.3 - TIMER 2 EXTERNAL ENABLE FLAG
0000             91   TCLK   BIT   0CCH  ;T2CON.4 - TRANSMIT CLOCK SELECT
0000             92   RCLK   BIT   0CDH  ;T2CON.5 - RECEIVE CLOCK SELECTT
0000             93   EXF2   BIT   0CEH  ;T2CON.6 - EXTERNAL TRANSITION FLAG
0000             94   TF2    BIT   0CFH  ;T2CON.7 - TIMER 2 OVERFLOW FLAG
0000             95   P      BIT   0D0H  ;PSW.0 - ACCUMULATOR PARITY FLAG
0000             96   OV     BIT   0D2H  ;PSW.2 - OVERFLOW FLAG
0000             97   RS0    BIT   0D3H  ;PSW.3 - REGISTER BANK SELECT 0
0000             98   RS1    BIT   0D4H  ;PSW.4 - REGISTER BANK SELECT 1
0000             99   F0     BIT   0D5H  ;PSW.5 - FLAG 0
0000            100   AC     BIT   0D6H  ;PSW.6 - AUXILIARY CARRY FLAG
0000            101   CY     BIT   0D7H  ;PSW.7 - CARRY FLAG
0000            102   
0000            103   ; For the altera DE2 configured with an 8051/8052 softcore processor
0000            104   ; we have the following extra registers:
0000            105   
0000            106   HEX0   DATA  091H ; Zero turns the segment on
0000            107   HEX1   DATA  092H ; 
0000            108   HEX2   DATA  093H ; 
0000            109   HEX3   DATA  094H ; 
0000            110   HEX4   DATA  08EH ;
0000            111   HEX5   DATA  08FH ;
0000            112   HEX6   DATA  096H ;
0000            113   HEX7   DATA  097H ;
0000            114   
0000            115   P0MOD  DATA  09AH ; Input/output mode bits for port 0.  '1' sets the port to output mode.
0000            116   P1MOD  DATA  09BH ; Input/output mode bits for port 1
0000            117   P2MOD  DATA  09CH ; Input/output mode bits for port 2
0000            118   P3MOD  DATA  09DH ; Input/output mode bits for port 3
0000            119   
0000            120   LEDRA  DATA  0E8H ; LEDs LEDR0 to LEDR7 (bit addressable, ex: LEDRA.1 for LEDR1)
0000            121   LEDRB  DATA  095H ; LEDs LEDR8 to LEDR15
0000            122   LEDRC  DATA  09EH ; LEDs LEDR16, LEDR15, and LEDG8
0000            123   LEDG   DATA  0F8H ; LEDs LEDG0 to LEDG7 (bit addressable, ex: LEDG.3 for LEDG3)
0000            124   SWA    DATA  0E8H ; Switches SW0 to SW7 (bit addressable, ex: SWA.1 for SW1)
0000            125   SWB    DATA  095H ; Switches SW8 to SW15
0000            126   SWC    DATA  09EH ; Switches SW16 and SW17
0000            127   KEY    DATA  0F8H ; KEY1=KEY.1, KEY2=KEY.2, KEY3=KEY.3.  KEY0 is the reset button! 
0000            128   
0000            129   LCD_CMD   DATA 0D8H ;
0000            130   LCD_DATA  DATA 0D9H ;
0000            131   LCD_MOD   DATA 0DAH ; Write 0xff to make LCD_DATA an output
0000            132   LCD_RW    BIT  0D8H ; '0' writes to LCD
0000            133   LCD_EN    BIT  0D9H ; Toggle from '1' to '0'
0000            134   LCD_RS    BIT  0DAH ; '0' for commands, '1' for data
0000            135   LCD_ON    BIT  0DBH ; Write '1' to power the LCD
0000            136   LCD_BLON  BIT  0DCH ; Write '1' to turn on back light
0000            137   
0000            138   FLASH_CMD  data 0DBH ; The control bits of the flash memory:
0000            139   ; bit 0: FL_RST_N  Set to 1 for normal operation
0000            140   ; bit 1: FL_WE_N
0000            141   ; bit 2: FL_OE_N
0000            142   ; bit 3: FL_CE_N
0000            143   FLASH_DATA data 0DCH ; 8-bit data bus of flash memory.
0000            144   FLASH_MOD  data 0DDH ; 0xff makes FLASH_DATA output.  0x00 makes FLASH_DATA input.
0000            145   FLASH_ADD0 data 0E1H ; address bits 0 to 7.
0000            146   FLASH_ADD1 data 0E2H ; address bits 8 to 15.
0000            147   FLASH_ADD2 data 0E3H ; address bits 16 to 21.
0000            148   
0000              2   
0000              3            CSEG at 0
0000 020384       4            ljmp mycode
0003              5   
0030              6   dseg at 30h
0030              7   x: ds 4 ; 32-bits for variable ‘x’
0034              8   y: ds 4 ; 32-bits for variable ‘y’
0038              9   bcd: ds 5 ; 10-digit packed BCD (each byte stores 2 digits)
003D             10   operation: ds 1
0000             11   bseg
0000             12   mf: dbit 1 ; Math functions flag
                 -1   $include(math32.asm) 
                626   $LIST
02DD             14   
02DD             15            CSEG
02DD             16   
02DD             17   ; Look-up table for 7-seg displays
02DD             18   myLUT:
02DD C0F9A4B0    19       DB 0C0H, 0F9H, 0A4H, 0B0H, 099H        ; 0 TO 4
     99
02E2 9282F880    20       DB 092H, 082H, 0F8H, 080H, 090H        ; 4 TO 9
     90
02E7             21   
                 22   showBCD MAC
                 23   	; Display LSD
                 24       mov A, %0
                 25       anl a, #0fh
                 26       movc A, @A+dptr
                 27       mov %1, A
                 28   	; Display MSD
                 29       mov A, %0
                 30       swap a
                 31       anl a, #0fh
                 32       movc A, @A+dptr
                 33       mov %2, A
                 34   ENDMAC
02E7             35   
02E7             36   Display:
02E7 9002DD      37            mov dptr, #myLUT
02EA             38            ; Display LSD
02EA E538        38       mov A, bcd+0
02EC 540F        38       anl a, #0fh
02EE 93          38       movc A, @A+dptr
02EF F591        38       mov HEX0, A
02F1             38            ; Display MSD
02F1 E538        38       mov A, bcd+0
02F3 C4          38       swap a
02F4 540F        38       anl a, #0fh
02F6 93          38       movc A, @A+dptr
02F7 F592        38       mov HEX1, A
02F9             39            ; Display LSD
02F9 E539        39       mov A, bcd+1
02FB 540F        39       anl a, #0fh
02FD 93          39       movc A, @A+dptr
02FE F593        39       mov HEX2, A
0300             39            ; Display MSD
0300 E539        39       mov A, bcd+1
0302 C4          39       swap a
0303 540F        39       anl a, #0fh
0305 93          39       movc A, @A+dptr
0306 F594        39       mov HEX3, A
0308             40            ; Display LSD
0308 E53A        40       mov A, bcd+2
030A 540F        40       anl a, #0fh
030C 93          40       movc A, @A+dptr
030D F58E        40       mov HEX4, A
030F             40            ; Display MSD
030F E53A        40       mov A, bcd+2
0311 C4          40       swap a
0312 540F        40       anl a, #0fh
0314 93          40       movc A, @A+dptr
0315 F58F        40       mov HEX5, A
0317 22          41       ret
0318             42   
                 43   MYRLC MAC
                 44   	mov a, %0
                 45   	rlc a
                 46   	mov %0, a
                 47   ENDMAC
0318             48   
0318             49   Shift_Digits:
0318 7804        50            mov R0, #4 ; shift left four bits
031A             51   Shift_Digits_L0:
031A C3          52            clr c
031B E538        53            mov a, bcd+0
031D 33          53            rlc a
031E F538        53            mov bcd+0, a
0320 E539        54            mov a, bcd+1
0322 33          54            rlc a
0323 F539        54            mov bcd+1, a
0325 E53A        55            mov a, bcd+2
0327 33          55            rlc a
0328 F53A        55            mov bcd+2, a
032A E53B        56            mov a, bcd+3
032C 33          56            rlc a
032D F53B        56            mov bcd+3, a
032F E53C        57            mov a, bcd+4
0331 33          57            rlc a
0332 F53C        57            mov bcd+4, a
0334 D8E4        58            djnz R0, Shift_Digits_L0
0336             59            ; R7 has the new bcd digit      
0336 EF          60            mov a, R7
0337 4538        61            orl a, bcd+0
0339 F538        62            mov bcd+0, a
033B             63            ; bcd+3 and bcd+4 don't fit in the 7-segment displays so make them zero
033B E4          64            clr a
033C F53C        65            mov bcd+4, a
033E 22          66            ret
033F             67   
033F             68   Wait50ms:
033F             69   ;33.33MHz, 1 clk per cycle: 0.03us
033F 781E        70            mov R0, #30
0341 794A        71   L3: mov R1, #74
0343 7AFA        72   L2: mov R2, #250
0345 DAFE        73   L1: djnz R2, L1 ;3*250*0.03us=22.5us
0347 D9FA        74       djnz R1, L2 ;74*22.5us=1.665ms
0349 D8F6        75       djnz R0, L3 ;1.665ms*30=50ms
034B 22          76       ret
034C             77   
034C             78   ; Check if SW0 to SW9 are toggled up.  Returns the toggled switch in
034C             79   ; R7.  If the carry is not set, no toggling switches were detected.
034C             80   ReadNumber:
034C ACE8        81            mov r4, SWA ; Read switches 0 to 7
034E E595        82            mov a, SWB ; Read switches 8 to 9
0350 5403        83            anl a, #00000011B ; Only two bits of SWB available
0352 FD          84            mov r5, a
0353 EC          85            mov a, r4
0354 4D          86            orl a, r5
0355 602B        87            jz ReadNumber_no_number
0357 12033F      88            lcall Wait50ms ; debounce
035A E5E8        89            mov a, SWA
035C C3          90            clr c
035D 9C          91            subb a, r4
035E 7022        92            jnz ReadNumber_no_number ; it was a bounce
0360 E595        93            mov a, SWB
0362 5403        94            anl a, #00000011B
0364 C3          95            clr c
0365 9D          96            subb a, r5
0366 701A        97            jnz ReadNumber_no_number ; it was a bounce
0368 7F10        98            mov r7, #16 ; Loop counter
036A             99   ReadNumber_L0:
036A C3         100            clr c
036B EC         101            mov a, r4
036C 33         102            rlc a
036D FC         103            mov r4, a
036E ED         104            mov a, r5
036F 33         105            rlc a
0370 FD         106            mov r5, a
0371 4004       107            jc ReadNumber_decode
0373 DFF5       108            djnz r7, ReadNumber_L0
0375 800B       109            sjmp ReadNumber_no_number       
0377            110   ReadNumber_decode:
0377 1F         111            dec r7
0378 D3         112            setb c
0379            113   ReadNumber_L1:
0379 E5E8       114            mov a, SWA
037B 70FC       115            jnz ReadNumber_L1
037D            116   ReadNumber_L2:
037D E595       117            mov a, SWB
037F 70FC       118            jnz ReadNumber_L2
0381 22         119            ret
0382            120   ReadNumber_no_number:
0382 C3         121            clr c
0383 22         122            ret
0384            123            
0384            124   mycode:
0384 75817F     125            mov SP, #7FH
0387 E4         126            clr a
0388 F5E8       127            mov LEDRA, a
038A F595       128            mov LEDRB, a
038C F538       129            mov bcd+0, a
038E F539       130            mov bcd+1, a
0390 F53A       131            mov bcd+2, a
0392 F53B       132            mov bcd+3, a
0394 F53C       133            mov bcd+4, a
0396 1202E7     134            lcall Display
0399            135   
0399            136            
0399            137   ; Assume KEY3 is the ‘+’ button, KEY2 is  the  ‘-’  button,  and  KEY1  
0399            138   ; is  the  ‘=’  button.    Since  there  are  not  enough  buttons  to assign  multiplication  and  division,  use  KEY0  as  a  shift  key:    
0399            139   ; if  KEY0  and  KEY3  are pressed, the operation is ‘*’.  Similarly, if KEY0 and KEY2 are pressed, the operation is ‘/’. 
0399            140   
0399            141   forever:
0399            142            ; add or multiply
0399 20FB2A     143            jb KEY.3, no_add ; If '+' key not pressed, skip
039C 30FBFD     144            jnb KEY.3, $ ; Wait for user to release '+' key
039F 12008C     145            lcall bcd2hex ; Convert the BCD number to hex in x
03A2 120273     146            lcall copy_xy ; move x to y (this is a function)
03A5 753000     147            mov x+0, #low (0 % 0x10000) 
03A8 753100     147            mov x+1, #high(0 % 0x10000) 
03AB 753200     147            mov x+2, #low (0 / 0x10000) 
03AE 753300     147            mov x+3, #high(0 / 0x10000)  ; clear x (this is a macro)
03B1 120003     148            lcall hex2bcd ; Convert binary x to BCD
03B4 1202E7     149            lcall Display ; Display the new BCD number
03B7 30F806     150            jnb KEY.0, is_mult
03BA 753D01     151            mov operation, #0000_0001B
03BD 020399     152            ljmp forever
03C0            153   is_mult:
03C0 753D04     154            mov operation, #0000_0100B
03C3 020399     155            ljmp forever 
03C6            156   no_add:
03C6            157            ; subtract or divide
03C6 20FA2A     158            jb KEY.2, no_subtract ; If '-' key not pressed, skip
03C9 30FAFD     159            jnb KEY.2, $ ; Wait for user to release '-' key
03CC 12008C     160            lcall bcd2hex ; Convert the BCD number to hex in x
03CF 120273     161            lcall copy_xy ; move x to y (this is a function)
03D2 753000     162            mov x+0, #low (0 % 0x10000) 
03D5 753100     162            mov x+1, #high(0 % 0x10000) 
03D8 753200     162            mov x+2, #low (0 / 0x10000) 
03DB 753300     162            mov x+3, #high(0 / 0x10000)  ; clear x (this is a macro)
03DE 120003     163            lcall hex2bcd ; Convert binary x to BCD
03E1 1202E7     164            lcall Display ; Display the new BCD number
03E4 30F806     165            jnb KEY.0, is_div
03E7 753D02     166            mov operation, #0000_0010B
03EA 020399     167            ljmp forever
03ED            168   is_div:
03ED 753D08     169            mov operation, #0000_1000B
03F0 020399     170            ljmp forever
03F3            171   no_subtract:
03F3 20F914     172            jb KEY.1, no_equal ; If the ’=’ key not pressed, skip
03F6 30F9FD     173            jnb KEY.1, $ ; Wait for user to release the ’=’ key
03F9 12008C     174            lcall bcd2hex ; Convert the BCD number to hex in x
03FC            175            ; Select the function the user wants to perform:
03FC E53D       176            mov a, operation ; The accumulator is bit addressable!
03FE 20E017     177            jb acc.0, do_addition
0401 20E123     178            jb acc.1, do_subtraction
0404 20E22F     179            jb acc.2, do_multiplication
0407 20E33B     180            jb acc.3, do_division 
040A            181   no_equal:
040A            182            ; get more numbers
040A 12034C     183            lcall ReadNumber
040D 5006       184            jnc no_new_digit ; Indirect jump to 'forever'
040F 120318     185            lcall Shift_Digits
0412 1202E7     186            lcall Display
0415            187   no_new_digit:
0415 020399     188            ljmp forever ; 'forever' is to far away, need to use ljmp       
0418            189   
0418            190   do_addition:
0418 120280     191            lcall xchg_xy
041B 1200C8     192            lcall add32 ; Add the numbers stored in x and y
041E 120003     193            lcall hex2bcd ; Convert result in x to BCD
0421 1202E7     194            lcall Display ; Display BCD using 7-segment displays
0424 020399     195            ljmp forever ; go check for more input
0427            196   
0427            197   do_subtraction:
0427 120280     198            lcall xchg_xy
042A 1200E9     199            lcall sub32 ; Add the numbers stored in x and y
042D 120003     200            lcall hex2bcd ; Convert result in x to BCD
0430 1202E7     201            lcall Display ; Display BCD using 7-segment displays
0433 020399     202            ljmp forever ; go check for more input
0436            203   
0436            204   do_multiplication:
0436 120280     205            lcall xchg_xy
0439 12017D     206            lcall mul32 ; Add the numbers stored in x and y
043C 120003     207            lcall hex2bcd ; Convert result in x to BCD
043F 1202E7     208            lcall Display ; Display BCD using 7-segment displays
0442 020399     209            ljmp forever ; go check for more input
0445            210   
0445            211   do_division:
0445 120280     212            lcall xchg_xy
0448 12020A     213            lcall div32 ; Add the numbers stored in x and y
044B 120003     214            lcall hex2bcd ; Convert result in x to BCD
044E 1202E7     215            lcall Display ; Display BCD using 7-segment displays
0451 020399     216            ljmp forever ; go check for more input
0454            217            
0454            218   end
